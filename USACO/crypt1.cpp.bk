/*
TASK: crypt1
ID: yuzheny2
LANG: C++
*/
#include <fstream>
#include <iostream>
#include <cmath>
#include <string>

using namespace::std;

bool ifvalid(string num, string digits)
{
	bool valid = true;
	bool notfound = false;
	int i, j;
	for(i = 0; i < num.length(); i ++) {
		for(j = 0; j < digits.length(); j ++) {
			if(num[i] == digits[j]) break;
		}
		if(j == digits.length()) {
			notfound = true;
			break;
		}
	}
	return !notfound;	
}

int main()
{
	int i, j, k, n;
	ifstream fin("crypt1.in");
	ofstream fout("crypt1.out");
	fin >> n;
	char digit;
	int *digits = new int[n]; 
	string dstr = "";
	for(i = 0; i < n; i ++) {
		fin >> digit;
		dstr += digit;
		digits[i] = digit - '1' + 1;
	}

	int hundreds[1000];
	int htot = 0;
	for(i = 0; i < n; i ++) {
		for(j = 0; j < n; j ++) {
			for(k = 0; k < n; k ++) {
				hundreds[htot++] = digits[i] * 100 + digits[j] * 10 + digits[k];
			}
		}
	}
	int solution = 0;
	int abc, e, de;
	for(i = 0; i < htot; i ++) {
		abc = hundreds[i];
		int validn = 0;
		int validd[10];
		for(j = 0; j < n; j ++) {
			e = digits[j];
			int mult = abc * e;
			if(mult > 999) continue; 
			if(ifvalid(to_string(mult), dstr)) {
				validd[validn++] = e;
			}
		}
		for(j = 0; j < validn; j ++) {
			for(k = 0; k < validn; k ++) {
				de = validd[j] * 10 + validd[k];	
				int mult = abc * de;
				if(ifvalid(to_string(mult), dstr)) {
					//cout<<"abc "<<abc<<" de "<<de<<" mult "<<abc * de <<endl;
					solution += 1;
				}
			} 
		}
	}
	fout<<solution<<endl;
}
